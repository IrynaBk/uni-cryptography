c
block_size
c
@private_key.n.num_bytes
decoded_data
c
@rc5_time
@rsa_time
c
    @public_key = OpenSSL::PKey::RSA.new(p)
p = ENV['PUBLIC_KEY'].gsub('\n', "\n")
c
    @public_key = OpenSSL::PKey::RSA.new(p)
p = ENV['PUBLIC_KEY'].gsub('\n', "\n")
puts "ENV['PUBLIC_KEY']: #{ENV['PUBLIC_KEY'].inspect}"
c
puts "ENV['PUBLIC_KEY']: #{ENV['PUBLIC_KEY'].inspect}"
puts "ENV['PUBLIC_KEY']: #{ENV['PUBLIC_KEY']}"
c
ENV['PUBLIC_KEY']
c
ENV['PUBLIC_KEY']
c
ENV['PUBLIC_KEY']
 c
ENV['PUBLIC_KEY']
c
ENV['PUBLIC_KEY']
c
result
c
decrypted.last
content_type
c
content_type
c
decrypted.first
c
content_type
c
content_type
MIME::Types.type_for(decrypted)
c
MIME::Types.type_for(decrypted)
content_type
c
с
content_type
mime_type
content_type
c
decrypted
c
decrypted
file.read
c
file.read
decrypted
c
encrypted
c
encrypted
c
file.read
decrypted
c
file.read
decrypted
c
decrypted
file_content
c
file.read
file_content
decrypted
c
decrypted
c
decrypted
c
decrypted
c
decrypted
c
decrypted
c
decrypted
c
decrypted
c
decrypted
c
file.read
file_content
decrypted
c
file_content
decrypted
c
decrypted
c
binary_data
decrypted
c
file.read
binary_data
decrypted
c
file_content
binary_data
decrypted
c
binary_data
c
binary_data
c
file.read.type
c
file.read
c
file.read
c
file_content
c
v
File.readlines
file.read
c
file_content
c
decrypted
c
decrypted
c
decrypted
c
c\\
decrypted
c
file_content
decrypted
c
file_content
decrypted
c
decrypted
c
file.read
File.binwrite(file.path, file_content)
      file = Tempfile.new('temp_hash_file')
file_content
c
decrypted
c
decrypted
c
encrypted
c
encrypted
c
с
mime_type.content_type
с
c
mime_type.content_type
c
mime_type.content_type
c
mime_type.binary?
c
MIME::Types.of(decrypted)
decrypted
mime_type
c
decrypted
c
@hash
c
@hash
c
@hash
c
params[:content]
params[:file]
c
params[:file]
c
params[:file]
c
params[:file]
c
params[:content]
c
params[:content]
c
params[:file]
c
params
